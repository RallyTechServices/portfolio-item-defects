<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Item Defects</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Fri Apr 01 2016 09:03:52 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Apr 01 2016 09:03:52 GMT-0600 (MDT)";
        var CHECKSUM = 8167943253;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.override(Ext.util.Filter,{
    createFilterFn: function() {
        var me       = this,
            matcher  = me.createValueMatcher(),
            property = !Ext.isArray(me.property) ? me.property.split(',') : me.property

        return function(item) {
            var hasmatch = false;
            for(var i=0;i<property.length;i++) {
                if(matcher.test(me.getRoot.call(me, item)[property[i]])) {
                    hasmatch=true;
                    break;
                }
            }
            return matcher === null ? value === null : hasmatch;
        };
    }
});


Ext.override(Rally.ui.combobox.ComboBox, {

    doLocalQuery: function(queryPlan) {
        var me = this,
            queryString = queryPlan.query;

        // Create our filter when first needed
        if (!me.queryFilter) {
            // Create the filter that we will use during typing to filter the Store
            me.queryFilter = new Ext.util.Filter({
                id: me.id + '-query-filter',
                anyMatch: true,
                caseSensitive: false,
                root: 'data',
                property: me.filterProperties
            });
            me.store.addFilter(me.queryFilter, true);
        }

        // Querying by a string...
        if (queryString || !queryPlan.forceAll) {
            me.queryFilter.disabled = false;
            me.queryFilter.setValue(me.enableRegEx ? new RegExp(queryString) : queryString);
        }

        // If forceAll being used, or no query string, disable the filter
        else {
            me.queryFilter.disabled = true;
        }

        // Filter the Store according to the updated filter
        me.store.filter();

        // Expand after adjusting the filter unless there are no matches
        if (me.store.getCount()) {
            me.expand();
        } else {
            me.collapse();
        }

        me.afterQuery(queryPlan);
    }
});

Ext.define('Rally.technicalservices.Toolbox',{
    singleton: true,
    fetchWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');

        Ext.create('Rally.data.wsapi.Store', config).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} for {1}: {2}",config, operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    fetchPortfolioItemTypes: function(){
        var deferred = Ext.create('Deft.Deferred'),
            store = Ext.create('Rally.data.wsapi.Store', {
                model: 'TypeDefinition',
                fetch: ['TypePath', 'Ordinal','Name'],
                filters: [
                    {
                        property: 'Parent.Name',
                        operator: '=',
                        value: 'Portfolio Item'
                    },
                    {
                        property: 'Creatable',
                        operator: '=',
                        value: 'true'
                    }
                ],
                sorters: [{
                    property: 'Ordinal',
                    direction: 'ASC'
                }]
            });

        store.load({
            callback: function(records, operation, success){
                if (success){
                    var portfolioItemTypes = new Array(records.length);
                    _.each(records, function(d){
                        //Use ordinal to make sure the lowest level portfolio item type is the first in the array.
                        var idx = Number(d.get('Ordinal'));
                        portfolioItemTypes[idx] = d.getData();
                    });
                    deferred.resolve(portfolioItemTypes);
                } else {
                    var error_msg = '';
                    if (operation && operation.error && operation.error.errors){
                        error_msg = operation.error.errors.join(',');
                    }
                    deferred.reject('Error loading Portfolio Item Types:  ' + error_msg);
                }
            }
        });
        return deferred.promise;
    }
});
Ext.define("portfolio-item-defects", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    config: {
        defaultSettings: {
            selectedPortfolioType: 'PortfolioItem/Theme',
            defectQuery: ''
        }
    },

    integrationHeaders : {
        name : "portfolio-item-defects"
    },

    defectFetch: ['ObjectID','FormattedID','Name','State'],

    launch: function() {
        Rally.technicalservices.Toolbox.fetchPortfolioItemTypes().then({
            success: function(portfolioItemTypes){
                this.portfolioItemTypes = portfolioItemTypes;
                this._addSelector();
            },
            failure: function(msg){
                this._showError(msg);
            },
            scope: this
        });
    },
    _addSelector: function(){
        var portfolioItemType = this.getSetting('selectedPortfolioType');
        this.removeAll();

        var cb = Ext.create('Rally.ui.combobox.ComboBox',{
            storeConfig: {
                model: portfolioItemType,
                fetch: ['FormattedID','ObjectID','Name'],
                remoteFilter: false,
                autoLoad: true
            },
            fieldLabel: 'Portfolio Item',
            itemId: 'portfolio-item-selector',
            allowNoEntry: true,
            noEntryValue: null,
            noEntryText: '-- All Portfolio Defects --',
            margin: 10,
            valueField: 'ObjectID',
            displayField: 'FormattedID',
            stateful: true,
            stateId: 'cb-pi-selector',
            width: 400,
            listConfig: {
                itemTpl: '<tpl if="Name">{FormattedID}: {Name}<tpl else>{FormattedID}</tpl>'
            },
            filterProperties: ['Name','FormattedID'],
            fieldCls: 'pi-selector',
            displayTpl: '<tpl for=".">' +
            '<tpl if="Name">{[values["FormattedID"]]}: {[values["Name"]]}' +
            '<tpl else>{[values["FormattedID"]]}</tpl>' +
            '<tpl if="xindex < xcount">,</tpl>' +
            '</tpl>'
        });
        this.selector = this.add(cb);

        this.selector.on('change', this._fetchUserStories, this);

        if (cb.getValue() === null){
            this._fetchUserStories(cb);
        }
    },
    _showError: function(msg){
        Rally.ui.notify.Notifier.showError({message: msg});
    },
    _fetchUserStories: function(cb){
        this.logger.log('_fetchUserStories', cb.getValue());
        var portfolioItem = cb.getRecord(),
            config = this._getUserStoryConfig(portfolioItem);

            Rally.technicalservices.Toolbox.fetchWsapiRecords(config).then({
                success: function(records){
                    this.logger.log('_fetchUserStories', config, records);
                    var defectConfig = this._getDefectConfig(records);

                    this._displayGrid(defectConfig);

                },
                failure: function(msg){
                    this._showError(msg);
                },
                scope: this
            });
    },
    _getUserStoryConfig: function(portfolioItem){
        var model = 'HierarchicalRequirement',
            idx = this._getPortfolioItemLevel(portfolioItem);

        var propertySegments = [this._getFeatureFieldName()];
        for (var i=0; i<idx; i++){
            propertySegments.push('Parent');
        }
        propertySegments.push('ObjectID');

        if (idx < 0){
            //something is wrong...
        }

        var operator = ">",
            value = 0;

        if (portfolioItem && portfolioItem.get('ObjectID') > 0){
            operator = "=";
            value = portfolioItem.get('ObjectID');
        }
        var filters = [{
            property: propertySegments.join('.'),
            operator: operator,
            value: value
        }];

        this.logger.log('_getUserStoryConfigs', portfolioItem, model, idx, propertySegments, filters);
        return {
            model: model,
            fetch: ['ObjectID','Defects'],
            filters: filters,
            limit: 'Infinity'
        };
    },
    _getDefectConfig: function(userStories){
        var model = 'Defect';

        var filters = _.filter(userStories, function(us){
            return us.get('Defects') && us.get('Defects').Count > 0;
        }).map(function(us){ return {
                property: 'Requirement.ObjectID',
                value: us.get('ObjectID')
            };
        });

        this.logger.log('_getDefectConfig', userStories.length, model, filters.length);
        if (filters.length === 0) {
            filters = [{property: 'ObjectID', value: 0}];
        }

        filters = Rally.data.wsapi.Filter.or(filters);
        var query = this.getSetting('defectQuery');
        if (query && query.length > 0){
            filters = filters.and(Rally.data.wsapi.Filter.fromQueryString(query));
        }

        this.logger.log('_getDefectConfig', query, filters.toString());

        return {
            models: ['defect'],
            enableHierarchy: true,

            fetch: this.defectFetch,
            filters: filters,
            limit: 'Infinity'
        };
    },
    _getPortfolioItemLevel: function(){

        var idx = -1,
            type = this.getSetting('selectedPortfolioType').toLowerCase();

        for (var i=0; i<this.portfolioItemTypes.length; i++){
            if (type === this.portfolioItemTypes[i].TypePath.toLowerCase()){
                idx = i;
                i = this.portfolioItemTypes.length;
            }
        }
        return idx;
    },
    _getFeatureFieldName: function(){
        this.logger.log('_getFeatureFieldName',this.portfolioItemTypes[0].TypePath,this.portfolioItemTypes[0].TypePath.replace("PortfolioItem/",""));
        return this.portfolioItemTypes[0].TypePath.replace("PortfolioItem/","");
    },
    _displayGrid: function(storeConfig){
        var me = this;
        if (this.down('rallygridboard')){
            this.down('rallygridboard').destroy();
        }

        var modelNames = ['defect'];
        Ext.create('Rally.data.wsapi.TreeStoreBuilder').build(storeConfig).then({
            success: function(store){
                var gb = this.add({
                    xtype: 'rallygridboard',
                    context: this.getContext(),
                    modelNames: modelNames,
                    toggleState: 'grid',
                    plugins: [{
                        ptype: 'rallygridboardcustomfiltercontrol',
                        headerPosition: 'right',
                        filterControlConfig: {
                            modelNames: modelNames,
                            stateful: true,
                            stateId: this.getContext().getScopedStateId('defect-grid-filter')
                        },
                        showOwnerFilter: false
                    },{
                        ptype: 'rallygridboardfieldpicker',
                        headerPosition: 'right',
                        modelNames: modelNames,
                        stateful: true,
                        stateId: this.getContext().getScopedStateId('defect-grid-columns')
                    }],
                    gridConfig: {
                        store: store,
                        storeConfig: {filters: storeConfig.filters },
                        columnCfgs: this._getColumnCfgs()
                    },
                    height: this.getHeight(),
                    listeners: {
                        afterrender: me._moveSelector,
                        beforedestroy: me._removeSelector,
                        scope: me
                    }
                });

            },
            scope: this
        });

    },
    _removeSelector: function(gb){
        this.logger.log('_removeSelector', gb);
        if (this.selector && this.selector.rendered) {
            var parent = this.selector.up();
            if(parent && parent.remove){
                parent.remove(this.selector, false);
            }
        }
    },
    _moveSelector: function(gb){
        this.logger.log('_moveSelector', gb);

        var header = gb.getHeader();

        if (header) {
            header.getLeft().add(this.selector);
        }
    },
    _getColumnCfgs: function(){
        return [{
            dataIndex: 'Name',
            text: 'Name',
            flex: 1
        }, {
            dataIndex: 'State',
            text: 'State'
        }, {
            dataIndex: 'Requirement',
            text: 'User Story'
        }, {
            dataIndex: 'Severity',
            text: 'Severity'
        }, {
            dataIndex: 'Priority',
            text: 'Priority'
        }, {
            dataIndex: 'OpenedDate',
            text: 'Opened Date'
        }, {
            dataIndex: 'Project',
            text: 'Project'
        }];
    },
    getSettingsFields: function(){
        return [{
            name: 'selectedPortfolioType',
            xtype: 'rallycombobox',
            labelAlign: 'right',
            labelWidth: 175,
            allowBlank: false,
            autoSelect: false,
            fieldLabel: 'Selected Portfolio Item Type',
            storeConfig: {
                model: Ext.identityFn('TypeDefinition'),
                sorters: [{ property: 'DisplayName' }],
                fetch: ['DisplayName', 'ElementName', 'TypePath', 'Parent', 'UserListable'],
                filters: [{property: 'TypePath', operator: 'contains', value: 'PortfolioItem/'}],
                autoLoad: false,
                remoteSort: false,
                remoteFilter: true
            },
            displayField: 'DisplayName',
            valueField: 'TypePath'
        },{
            xtype: 'textarea',
            fieldLabel: 'Defect Query',
            labelAlign: 'right',
            labelWidth: 175,
            name: 'defectQuery',
            anchor: '100%',
            cls: 'query-field',
            margin: '0 70 0 0',
            plugins: [
                {
                    ptype: 'rallyhelpfield',
                    helpId: 194
                },
                'rallyfieldvalidationui'
            ],
            validateOnBlur: false,
            validateOnChange: false,
            validator: function(value) {
                try {
                    if (value) {
                        Rally.data.wsapi.Filter.fromQueryString(value);
                    }
                    return true;
                } catch (e) {
                    return e.message;
                }
            }
        }];
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },

    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },

    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },

    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('portfolio-item-defects', {
                   name: 'Portfolio Item Defects'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>